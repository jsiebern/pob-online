// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as ReactDom from "react-dom";
import * as Reprocessing from "reprocessing/src/Reprocessing.bs.js";
import * as Reprocessing_Env from "reprocessing/src/Reprocessing_Env.bs.js";
import * as Reprocessing_Draw from "reprocessing/src/Reprocessing_Draw.bs.js";
import * as Reprocessing_Constants from "reprocessing/src/Reprocessing_Constants.bs.js";

function Test$TestComponent(Props) {
  return React.createElement("div", undefined, "React test");
}

var TestComponent = {
  make: Test$TestComponent
};

var root = document.querySelector("#root");

if (!(root == null)) {
  ReactDom.render(React.createElement(Test$TestComponent, {}), root);
}

function worldToScreen(cWorld, offset) {
  return {
          x: cWorld.x - offset.x | 0,
          y: cWorld.y - offset.y | 0
        };
}

function screenToWorld(cScreen, offset) {
  return {
          x: cScreen.x + offset.x | 0,
          y: cScreen.y + offset.y | 0
        };
}

var deltaY = {
  contents: []
};

document.addEventListener("wheel", (function ($$event) {
        var dY = $$event.deltaY;
        return deltaY.contents.push(dY);
      }));

function setup(env) {
  Reprocessing_Env.size(720, 468, env);
  return {
          cOffset: {
            x: 0,
            y: 0
          },
          startPan: undefined,
          deltaY: 0.0,
          scale: {
            x: 1.0,
            y: 1.0
          }
        };
}

function draw(state, env) {
  var dY = deltaY.contents.shift();
  var state$1;
  if (dY !== undefined) {
    var factor = 1 - dY / 1000;
    state$1 = {
      cOffset: state.cOffset,
      startPan: state.startPan,
      deltaY: dY,
      scale: {
        x: state.scale.x * factor,
        y: state.scale.y * factor
      }
    };
  } else {
    state$1 = {
      cOffset: state.cOffset,
      startPan: state.startPan,
      deltaY: 0.0,
      scale: state.scale
    };
  }
  Reprocessing_Draw.background(Reprocessing_Constants.black, env);
  Reprocessing_Draw.fill(Reprocessing_Constants.red, env);
  var rectPosS = worldToScreen({
        x: 50,
        y: 50
      }, state$1.cOffset);
  Reprocessing_Draw.rect([
        rectPosS.x * state$1.scale.x | 0,
        rectPosS.y * state$1.scale.y | 0
      ], 100 * state$1.scale.x | 0, 100 * state$1.scale.y | 0, env);
  return state$1;
}

Reprocessing.run(setup, undefined, draw, undefined, (function (state, env) {
        var match = Reprocessing_Env.mouse(env);
        var y = match[1];
        var x = match[0];
        var pan = state.startPan;
        if (pan !== undefined) {
          return {
                  cOffset: {
                    x: state.cOffset.x - (x - pan.x | 0) | 0,
                    y: state.cOffset.y - (y - pan.y | 0) | 0
                  },
                  startPan: {
                    x: x,
                    y: y
                  },
                  deltaY: state.deltaY,
                  scale: state.scale
                };
        } else {
          return state;
        }
      }), (function (state, env) {
        var match = Reprocessing_Env.mouse(env);
        return {
                cOffset: state.cOffset,
                startPan: {
                  x: match[0],
                  y: match[1]
                },
                deltaY: state.deltaY,
                scale: state.scale
              };
      }), (function (state, _env) {
        return {
                cOffset: state.cOffset,
                startPan: undefined,
                deltaY: state.deltaY,
                scale: state.scale
              };
      }), undefined, undefined, undefined, undefined);

export {
  TestComponent ,
  worldToScreen ,
  screenToWorld ,
  deltaY ,
  setup ,
  draw ,
  
}
/* root Not a pure module */
